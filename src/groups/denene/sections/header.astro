---
import IconArrowLeft from "@/icons/icon-arrow-left.astro";
import IconBars from "@/icons/icon-bars.astro";
import IconXmark from "@/icons/icon-xmark.astro";
---

<header class="container">
  <div class="menu">
    <button class="menu-button" aria-label="メニュー">
      <IconBars class="menu-button-icon" />
    </button>
  </div>
  <dialog class="dialog">
    <form method="dialog" class="dialog-inner">
      <header class="dialog-header">
        <button class="dialog-header-close" aria-label="閉じる">
          <IconXmark class="dialog-header-close-icon" />
        </button>
      </header>
      <div class="dialog-main">
        <a href="/about/" class="dialog-main-link"
          ><IconArrowLeft class="dialog-main-link-icon" />トップページに戻る</a
        >
      </div>
    </form>
  </dialog>
</header>

<style>
  .container {
    background: rgb(var(--gray-800));
    height: 5dvh;
    padding: 1rem;
  }

  .menu {
    display: flex;
    justify-content: flex-end;
  }

  .menu-button {
    align-items: center;
    border-radius: 0.125rem;
    color: rgb(var(--gray-100) / 70%);
    cursor: pointer;
    display: inline-flex;
    padding: 0.5rem 0.75rem;
  }

  @media (width >= 768px) {
    .menu-button {
      padding: 0.75rem 1rem;
    }
  }

  .menu-button:active {
    background: rgb(var(--gray-700));
    color: rgb(var(--gray-100));
  }

  @media (hover: hover) and (pointer: fine) {
    .menu-button:hover {
      background: rgb(var(--gray-700));
      color: rgb(var(--gray-100));
    }
  }

  .menu-button-icon {
    height: 1.25rem;
    width: 1.25rem;
  }

  .dialog {
    background: rgb(var(--gray-800));
    border: 1px solid rgb(var(--gray-400) / 10%);
    border-radius: 0.125rem;
    padding: 0.5rem 0.75rem;
    width: 85%;
  }

  @media (width >= 768px) {
    .dialog {
      width: 50%;
    }
  }

  @media (width >= 1024px) {
    .dialog {
      width: 25%;
    }
  }

  .dialog-inner {
    padding-bottom: 2rem;
  }

  .dialog-header {
    display: flex;
    justify-content: flex-end;
    margin-bottom: 0.25rem;
  }

  .dialog-header-close {
    color: rgb(var(--gray-100) / 70%);
    cursor: pointer;
  }

  .dialog-header-close:active {
    color: rgb(var(--gray-100));
  }

  @media (hover: hover) and (pointer: fine) {
    .dialog-header-close:hover {
      color: rgb(var(--gray-100));
    }
  }

  .dialog-header-close-icon {
    height: 1.5rem;
    vertical-align: -0.3em;
    width: 1.5rem;
  }

  .dialog-main {
    display: grid;
    place-items: center;
  }

  .dialog-main-link {
    align-items: center;
    box-shadow: 0 2px 0 0 rgb(var(--gray-400) / 70%);
    color: rgb(var(--gray-400));
    display: inline-flex;
    font-weight: bold;
    gap: 0.25rem;
    line-height: 1.5;
  }

  .dialog-main-link:active {
    color: rgb(var(--gray-100));
  }

  @media (hover: hover) and (pointer: fine) {
    .dialog-main-link:hover {
      color: rgb(var(--gray-100));
    }
  }

  .dialog-main-link-icon {
    height: 1rem;
    width: 1rem;
  }
</style>

<script>
  const menu = document.querySelector<HTMLDivElement>(".menu");
  if (!menu) throw Error("menu element does not exists.");

  const dialog = document.querySelector<HTMLDialogElement>(".dialog");
  if (!dialog) throw Error("dialog element does not exists.");

  menu.addEventListener("click", () => {
    dialog.showModal();
  });

  dialog.addEventListener("click", (event) => {
    const target = event.target as HTMLElement;
    if (["A", "DIALOG"].includes(target.nodeName)) dialog.close();
  });
</script>
